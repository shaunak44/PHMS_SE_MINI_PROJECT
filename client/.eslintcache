[{"/home/shaunak/SE/SE_Project/client/src/index.js":"1","/home/shaunak/SE/SE_Project/client/src/App1.js":"2","/home/shaunak/SE/SE_Project/client/src/reportWebVitals.js":"3","/home/shaunak/SE/SE_Project/client/src/services/Login.js":"4","/home/shaunak/SE/SE_Project/client/src/services/signUp.js":"5","/home/shaunak/SE/SE_Project/client/src/services/CitizenProfile.js":"6","/home/shaunak/SE/SE_Project/client/src/services/RegisterHospital.js":"7","/home/shaunak/SE/SE_Project/client/src/services/RegisterOperator.js":"8","/home/shaunak/SE/SE_Project/client/src/services/RegisterDoctor.js":"9","/home/shaunak/SE/SE_Project/client/src/services/CreateCitizenProfile.js":"10","/home/shaunak/SE/SE_Project/client/src/services/Chatbot.js":"11","/home/shaunak/SE/SE_Project/client/src/services/RegisterPharmacy.js":"12","/home/shaunak/SE/SE_Project/client/src/services/LoginPharmacyOperator.js":"13","/home/shaunak/SE/SE_Project/client/src/services/LoginDoctor.js":"14","/home/shaunak/SE/SE_Project/client/src/services/LoginHospitalOperator.js":"15","/home/shaunak/SE/SE_Project/client/src/services/FAQ.js":"16","/home/shaunak/SE/SE_Project/client/src/services/Analysis.js":"17","/home/shaunak/SE/SE_Project/client/src/services/Locator.js":"18"},{"size":521,"mtime":1618723692589,"results":"19","hashOfConfig":"20"},{"size":12652,"mtime":1619613235686,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1612081859868,"results":"22","hashOfConfig":"20"},{"size":3963,"mtime":1618912976312,"results":"23","hashOfConfig":"20"},{"size":4428,"mtime":1619345300338,"results":"24","hashOfConfig":"20"},{"size":1795,"mtime":1619529997256,"results":"25","hashOfConfig":"20"},{"size":5417,"mtime":1619531162126,"results":"26","hashOfConfig":"20"},{"size":3626,"mtime":1618912976312,"results":"27","hashOfConfig":"20"},{"size":3915,"mtime":1618912976312,"results":"28","hashOfConfig":"20"},{"size":18588,"mtime":1619530009468,"results":"29","hashOfConfig":"20"},{"size":1225,"mtime":1619610689644,"results":"30","hashOfConfig":"20"},{"size":5474,"mtime":1619531306337,"results":"31","hashOfConfig":"20"},{"size":15132,"mtime":1619530095031,"results":"32","hashOfConfig":"20"},{"size":10113,"mtime":1619530060825,"results":"33","hashOfConfig":"20"},{"size":12016,"mtime":1619530073200,"results":"34","hashOfConfig":"20"},{"size":3167,"mtime":1619545548168,"results":"35","hashOfConfig":"20"},{"size":11225,"mtime":1619599796071,"results":"36","hashOfConfig":"20"},{"size":7212,"mtime":1619537012337,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},"1hvvxb4",{"filePath":"42","messages":"43","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"41"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"41"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"41"},"/home/shaunak/SE/SE_Project/client/src/index.js",["83"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App1, { AppWithRouter } from './App1';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App1/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["84","85"],"/home/shaunak/SE/SE_Project/client/src/App1.js",["86","87","88","89","90","91","92","93"],"/home/shaunak/SE/SE_Project/client/src/reportWebVitals.js",[],"/home/shaunak/SE/SE_Project/client/src/services/Login.js",[],"/home/shaunak/SE/SE_Project/client/src/services/signUp.js",["94"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport {\n    Form,\n    Button,\n    Jumbotron,\n    Container\n} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport validator from 'validator'\n\nexport default class SignUp extends Component{\n    constructor(props) {\n        super(props)\n\n        // this.onChangeAadhaar = this.onChangeAadhaar.bind(this);\n        // this.onChangeEmail = this.onChangeEmail.bind(this);\n        // this.onChangePassword = this.onChangePassword.bind(this);\n        // this.onSubmit = this.onSubmit.bind(this);\n\n        this.state = {\n            aadhaar_id: '',\n            email_id: '',\n            password: '',\n            errorPassword:'',\n        }\n    }\n\n    onChangeAadhaar(e){\n        console.log(e.target.value);\n        this.setState({aadhaar_id: e.target.value})\n    }\n\n    onChangeEmail(e){\n        console.log(e.target.value);\n        this.setState({email_id: e.target.value})\n    }\n\n    onChangePassword(e){\n        console.log(e.target.value);\n        if (validator.isStrongPassword(e.target.value, {\n            minLength: 8, minLowercase: 1,\n            minUppercase: 1, minNumbers: 1, minSymbols: 1\n          })) {\n            this.setState({errorPassword: \"Strong Password\"})  \n          } else {\n            this.setState({errorPassword: \"Week Password\"})  \n          }\n          this.setState({password: e.target.value})\n    }\n\n    onSubmit(e){\n\n        console.log(e);\n        e.preventDefault();\n\n        if(this.state.errorPassword == \"Week Password\"){\n            toast('Week password')\n            return;\n        }\n\n        const userObject = {\n            aadhaar_id : this.state.aadhaar_id,\n            email_id : this.state.email_id,\n            password : this.state.password\n        };\n        \n        console.log(userObject)\n\n        axios.post(`http://localhost:${process.env.REACT_APP_SERVER_PORT}/citizen/signup`, userObject)\n        .then((res) => {\n            console.log(res.data.token)\n\n            // Save data to sessionStorage\n            sessionStorage.setItem('token', res.data.token);\n\n            // Get saved data from sessionStorage\n            let data = sessionStorage.getItem('token');\n\n            console.log(data)\n             toast(\"Sucessfully signed up\");\n\n        }).catch((error) => {\n            console.log(error)\n            toast(\"Invalid cred or already registered\");\n        });\n\n        this.setState({ aadhaar_id: '', email_id: '', password: ''});\n\n    }\n\n   \n    render(){\n        return(\n            <Container>\n                <Jumbotron>\n                    <h2>Register</h2>\n                    <Form onSubmit={this.onSubmit.bind(this)}>\n\n                        <Form.Group>\n                            <Form.Label>Aadhar ID</Form.Label>\n                            <Form.Control required type=\"number\" placeholder=\"Enter Aadhar Number\" value={this.state.aadhaar_id} onChange={this.onChangeAadhaar.bind(this)} Min=\"100000000000\" Max=\"999999999999\"/>\n                        </Form.Group>\n\n                        <Form.Group controlId=\"formBasicEmail\">\n                            <Form.Label>Email address</Form.Label>\n                            <Form.Control required type=\"email\" placeholder=\"Enter email\" value={this.state.email_id} onChange={this.onChangeEmail.bind(this)} />\n                            <Form.Text className=\"text-muted\">\n                            We'll never share your email with anyone else.\n                            </Form.Text>\n                        </Form.Group>\n\n                        <Form.Group controlId=\"formBasicPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control required onChange={this.onChangePassword.bind(this)} value={this.state.password} type=\"password\" placeholder=\"Password\" />\n                            <Form.Text className=\"text-muted\">\n                            {this.state.errorPassword}\n                            </Form.Text>    \n                        </Form.Group>\n\n                        <Button variant=\"primary\" type=\"submit\">\n                            Submit\n                        </Button>\n                        <ToastContainer />\n                    </Form>\n                </Jumbotron>\n            </Container> \n        )\n    }\n\n}","/home/shaunak/SE/SE_Project/client/src/services/CitizenProfile.js",[],"/home/shaunak/SE/SE_Project/client/src/services/RegisterHospital.js",["95"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {\n    Form,\n    Button,\n    Jumbotron,\n    Container\n} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nexport default class HospitalRegister extends Component{\n    constructor(props) {\n        super(props)\n        this.state = {\n            usersCollection: []\n        }\n\n        this.onChangeHospitalId = this.onChangeHospitalId.bind(this);\n        this.onChangeName = this.onChangeName.bind(this);\n        this.onChangeNoOfBeds = this.onChangeNoOfBeds.bind(this);\n        this.onChangePhoneNumber = this.onChangePhoneNumber.bind(this);\n        this.onChangeAddress = this.onChangeAddress.bind(this);\n        this.onChangeType  = this.onChangeType.bind(this);\n        this.onSubmit  = this.onSubmit.bind(this);\n\n\n\n        this.state = {\n            hospital_id: '',\n            name:'',\n            no_of_beds:'',\n            phone_number:'',\n            address:'',\n            type:'',\n            pincode:'',\n        };\n    }\n\n    onChangeHospitalId(e){\n        this.setState({hospital_id: e.target.value})\n    }\n\n    onChangeName(e){\n        this.setState({name: e.target.value})\n    }\n    onChangeNoOfBeds(e){\n        this.setState({no_of_beds: e.target.value})\n    }\n    onChangePhoneNumber(e){\n        this.setState({phone_number: e.target.value})\n    }\n    onChangeAddress(e){\n        this.setState({address: e.target.value})\n    }\n    onChangePincode(e){\n        this.setState({pincode: e.target.value})\n    }\n    onChangeType(e){\n        this.setState({type: e.target.value})\n    }\n\n    onSubmit(e){\n        e.preventDefault()\n        this.state.address += (\"-\" + this.state.pincode)\n\n        const userObject = {\n            hospital_id: this.state.hospital_id,\n            name : this.state.name,\n            address : this.state.address,\n            phone_number : this.state.phone_number,\n            no_of_beds: this.state.no_of_beds,\n            type: this.state.type,\n        };\n        console.log(userObject)\n        axios.post(`http://localhost:${process.env.REACT_APP_SERVER_PORT}/hospital/registerhospital`, userObject)\n        .then((res) => {\n            console.log(res.data.message)\n            toast.success('Registration Sucessful')\n\n        }).catch((error) => {\n            console.log(error)\n            toast.error('Already registred or Invalid Details')\n        });\n\n        this.setState({\n            hospital_id: '',\n            name:'',\n            no_of_beds:'',\n            phone_number:'',\n            address:'',\n            type:'',\n        });\n    }\n\n    render(){\n        return(\n            <Container>\n                <Jumbotron>\n                    <h2>Register Hospital</h2>\n                    <Form onSubmit={this.onSubmit.bind(this)}>\n                        <Form.Group>\n                            <Form.Label>Name:</Form.Label>\n                            <Form.Control required type=\"text\" placeholder=\"Enter Hospital Name\" value={this.state.name} onChange={this.onChangeName.bind(this)} />\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label>Hospital ID:</Form.Label>\n                            <Form.Control required type=\"number\" placeholder=\"Hospital Number\" value={this.state.hospital_id} onChange={this.onChangeHospitalId.bind(this)} />\n                        </Form.Group>   \n\n                        <Form.Group>\n                            <Form.Label>Phone Number:</Form.Label>\n                            <Form.Control required type=\"number\" placeholder=\"Enter Hospital Phone Number\" value={this.state.phone_number} onChange={this.onChangePhoneNumber.bind(this)} />\n                        </Form.Group>    \n\n                        <Form.Group>\n                            <Form.Label>Number Of Beds:</Form.Label>\n                            <Form.Control required type=\"number\" placeholder=\"Enter Number Of Beds\" value={this.state.no_of_beds} onChange={this.onChangeNoOfBeds.bind(this)} />\n                        </Form.Group>  \n\n                        <Form.Group>\n                            <Form.Label>Address:</Form.Label>\n                            <Form.Control required type=\"text\" placeholder=\"Enter Hospital Address\" value={this.state.address} onChange={this.onChangeAddress.bind(this)}  />\n                        </Form.Group>  \n\n                        <Form.Group>\n                            <Form.Label>Pincode:</Form.Label>\n                            <Form.Control required type=\"number\" placeholder=\"Enter Pincode\" value={this.state.pincode} onChange={this.onChangePincode.bind(this)} min=\"100000\" max=\"999999\"/>\n                        </Form.Group>  \n\n                        <Form.Group>\n                            <Form.Label>Type:</Form.Label>\n                            <Form.Control required type=\"text\" placeholder=\"Enter Hospital Type\" value={this.state.type} onChange={this.onChangeType.bind(this)} />\n                        </Form.Group>              \n\n                        <Button variant=\"primary\" type=\"submit\">\n                            Submit\n                        </Button>\n                        <ToastContainer/>\n                    </Form>\n                </Jumbotron>\n            </Container> \n           \n        )\n    }\n}","/home/shaunak/SE/SE_Project/client/src/services/RegisterOperator.js",[],"/home/shaunak/SE/SE_Project/client/src/services/RegisterDoctor.js",[],"/home/shaunak/SE/SE_Project/client/src/services/CreateCitizenProfile.js",[],"/home/shaunak/SE/SE_Project/client/src/services/Chatbot.js",["96","97"],"import React, {Component} from 'react';\nimport {\n    Container, Jumbotron, Form, Button\n} from 'react-bootstrap'\n\nexport default class Chatbot extends Component{\n    constructor(props) {\n        super(props)\n        this.onSubmit = this.onSubmit.bind(this);\n        this.state = {\n            allButtons: [],\n            buttonText : ['What is PHMS', 'How to Login', \"How to signup\"],\n            allChats :[]\n        }\n    }\n\n    onSubmit(temp){\n        console.log(temp)\n        if(temp == \"What is PHMS\"){\n            \n        }\n        \n    }\n\n    componentDidMount(){\n        const info = []\n        for(let i = 0; i < this.state.buttonText.length; i++){\n            console.log(\"here1\")\n            info.push(\n                <><Button variant=\"dark\" onClick={() => this.onSubmit(this.state.buttonText[i])}>\n                    {this.state.buttonText[i]}\n                </Button><br></br><br></br></> \n            )\n        }\n        this.setState({allButtons: info})\n    }\n\n    render() {\n        return (\n            <Container>\n                <Jumbotron>\n                    {this.state.allChats}\n                    {this.state.allButtons}\n                </Jumbotron>\n            </Container>\n        )\n    }\n}\n\n","/home/shaunak/SE/SE_Project/client/src/services/RegisterPharmacy.js",["98"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {\n    Form,\n    Button,\n    Jumbotron,\n    Container\n} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \nexport default class PharmacyRegister extends Component{\n    constructor(props) {\n        super(props)\n        this.state = {\n            usersCollection: []\n        }\n\n        this.onChangeStoreId = this.onChangeStoreId.bind(this);\n        this.onChangeName = this.onChangeName.bind(this);\n        this.onChangeOpeningTime = this.onChangeOpeningTime.bind(this);\n        this.onChangePhoneNumber = this.onChangePhoneNumber.bind(this);\n        this.onChangeAddress = this.onChangeAddress.bind(this);\n        this.onChangeClosingTime  = this.onChangeClosingTime.bind(this);\n        this.onSubmit  = this.onSubmit.bind(this);\n\n\n\n        this.state = {\n            store_id: '',\n            name:'',\n            opening_time:'',\n            phone_number:'',\n            address:'',\n            closing_time:'',\n            pincode:''\n        };\n    }\n\n\n    onChangeStoreId(e){\n        this.setState({store_id: e.target.value})\n    }\n\n    onChangeName(e){\n        this.setState({name: e.target.value})\n    }\n    onChangeOpeningTime(e){\n        this.setState({opening_time: e.target.value})\n    }\n    onChangePhoneNumber(e){\n        this.setState({phone_number: e.target.value})\n    }\n    onChangeAddress(e){\n        this.setState({address: e.target.value})\n    }\n    onChangePincode(e){\n        this.setState({pincode: e.target.value})\n    }\n    onChangeClosingTime(e){\n        this.setState({closing_time: e.target.value})\n    }\n\n    onSubmit(e){\n        e.preventDefault()\n        this.state.address += (\"-\"+this.state.pincode)\n        const userObject = {\n            store_id: this.state.store_id,\n            name : this.state.name,\n            address : this.state.address,\n            phone_number : this.state.phone_number,\n            opening_time: this.state.opening_time,\n            closing_time: this.state.closing_time,\n        };\n        console.log(userObject)\n        axios.post(`http://localhost:${process.env.REACT_APP_SERVER_PORT}/pharmacy/registerpharmacy`, userObject)\n        .then((res) => {\n            console.log(res.data.message)\n            toast.success('Registration Sucessful')\n\n        }).catch((error) => {\n            console.log(error)\n            toast.error('Already registered or Invalid details')\n        });\n\n        this.setState({\n            store_id: '',\n            name:'',\n            opening_time:'',\n            phone_number:'',\n            address:'',\n            closing_time:''\n        });\n    }\n\n    render(){\n        return(\n            <Container>\n                <Jumbotron>\n                    <h2>Register Pharmacy</h2>\n                    <Form onSubmit={this.onSubmit.bind(this)}>\n                        <Form.Group>\n                            <Form.Label>Name:</Form.Label>\n                            <Form.Control required type=\"text\" placeholder=\"Enter Pharmacy Name\" value={this.state.name} onChange={this.onChangeName.bind(this)} />\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label>Pharmacy ID:</Form.Label>\n                            <Form.Control required type=\"number\" placeholder=\"Enter Pharmacy ID\" value={this.state.store_id} onChange={this.onChangeStoreId.bind(this)} />\n                        </Form.Group>   \n\n                        <Form.Group>\n                            <Form.Label>Phone Number:</Form.Label>\n                            <Form.Control required type=\"number\" placeholder=\"Enter Pharmacy Phone Number\" value={this.state.phone_number} onChange={this.onChangePhoneNumber.bind(this)} />\n                        </Form.Group>    \n\n                        <Form.Group>\n                            <Form.Label>Opening Time:</Form.Label>\n                            <Form.Control required type=\"time\" placeholder=\"Enter Opening Time\" value={this.state.opening_time} onChange={this.onChangeOpeningTime.bind(this)} />\n                        </Form.Group>  \n\n                        <Form.Group>\n                            <Form.Label>Closing Time:</Form.Label>\n                            <Form.Control required type=\"time\" placeholder=\"Enter Closing Time\" value={this.state.closing_time} onChange={this.onChangeClosingTime.bind(this)} />\n                        </Form.Group> \n\n                        <Form.Group>\n                            <Form.Label>Address:</Form.Label>\n                            <Form.Control required type=\"text\" placeholder=\"Enter Hospital Address\" value={this.state.address} onChange={this.onChangeAddress.bind(this)}  />\n                        </Form.Group> \n\n                        <Form.Group>\n                            <Form.Label>Pincode:</Form.Label>\n                            <Form.Control required type=\"number\" placeholder=\"Enter Pincode\" value={this.state.pincode} onChange={this.onChangePincode.bind(this)} min=\"100000\" max=\"999999\"/>\n                        </Form.Group>                \n\n                        <Button variant=\"primary\" type=\"submit\">\n                            Submit\n                        </Button>\n                        <ToastContainer/>\n                    </Form>\n                </Jumbotron>\n            </Container> \n        )\n    }\n}","/home/shaunak/SE/SE_Project/client/src/services/LoginPharmacyOperator.js",[],"/home/shaunak/SE/SE_Project/client/src/services/LoginDoctor.js",[],"/home/shaunak/SE/SE_Project/client/src/services/LoginHospitalOperator.js",[],"/home/shaunak/SE/SE_Project/client/src/services/FAQ.js",["99"],"import React, { Component} from \"react\";\nimport Faq from \"react-faq-component\";\nimport {\n    Jumbotron,\n    Container,\n} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst data = {\n    title: \"FAQ\",\n    rows: [\n        {\n            title: \"Who can use PHMS?\",\n            content: `Every person having Aadhaar Id can use the services by registering on the PHMS portal.`,\n        },\n        {\n            title: \"Is my Data safe?\",\n            content:\n                \"We do not share ypur data with anyone for advertising, analysis etc. You data will be accessible to Doctors(for treatment) and Admins(for analysis)\",\n        },\n        {\n            title: \"Can I book online appointments?\",\n            content: `Yes. You can book online appointments here on PHMS portal.`,\n        },\n        {\n            title: \"As a pharmacy or hospital operator, how often should I update my Data?\",\n            content: `It is adviced to update your data as you update your inventory for optimal portal functioning.`,\n        },\n        {\n            title: \"Why does a doctor have access to my Data?\",\n            content: `The doctor needs to know the previous patient history for better treatment. Thus the doctors can chek previous data.`,\n        },\n        {\n            title: \"Can I rely on PHMS?\",\n            content: `Yes, you can definitely rely on PHMS. But in case of emergency and sever illness, visit your doctor immediately.`,\n        },\n        {\n            title: \"Who is responsible for delay in PHMS?\",\n            content: `We understand that delay in medical process is not tolerable. But due to various reasons like internet connectivity, improper filling of data, there may be delay in the process of appointments. The PHMS, however is not responsible for the loss and users are adviced to decide on their own discretion`,\n        },\n        {\n            title: \"Who manages the PHMS?\",\n            content: `PHMS is managed by National Informatics Center, a Government body. The admin can check, analyse and retrieve the data.`,\n        },\n        {\n            title: \"How is my data used at the PHMS?\",\n            content: `Your data is used by the PHMS to analyze the health status of people in the area PHMS is functioning. To put it in simple words, we analyxe the status of health on the basis of bmi, age and number of available beds, etc.`,\n        },\n    ],\n};\n\nconst styles = {\n    bgColor: '#e9ecef',\n    titleTextColor: \"Red\",\n    rowTitleColor: \"#04355d\",\n    rowContentColor: 'black',\n    arrowColor: \"red\",\n};\n\nconst config = {\n    animate: true,\n    // arrowIcon: \"V\",\n    tabFocus: true\n};\n\n\nexport default class FaqPage extends Component{\n    render() {\n        const divStyle = {\n            margin: '20px auto',\n            padding: '0px 20px',\n        };\n        return (\n            <div>\n            <Container>\n                <Jumbotron>\n                    <Faq\n                    data={data}\n                    styles={styles}\n                    config={config}\n                    />\n                </Jumbotron>\n            </Container>\n            \n            </div>\n        )\n    }\n}","/home/shaunak/SE/SE_Project/client/src/services/Analysis.js",["100","101","102","103","104"],"import React, { Component } from 'react';\nimport Chart from 'react-apexcharts'\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n    Jumbotron,\n    Container,\n} from 'react-bootstrap';\nimport { relativeTimeRounding } from 'moment';\n\n\nclass AgePie extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            options: {\n                labels: ['0-18', '19-58', '59+'],\n                title: {\n                    text: \"Age Division\",\n                    align: 'left',\n                    margin: 10,\n                    offsetX: 0,\n                    offsetY: 0,\n                    floating: false,\n                    style: {\n                      fontSize:  '25px',\n                      fontWeight:  'bold',\n                      fontFamily:  undefined,\n                      color:  '#263238'\n                    },\n                },\n            },\n            series: [0, 0, 0],\n            labels: ['0-18', '19-58', '59+'],\n            citizenInfo: [{}, {}]\n        }\n    }\n\n    componentDidMount(){\n        axios.get(`http://localhost:${process.env.REACT_APP_SERVER_PORT}/citizen/viewstats`, {\n        })\n        .then(res => {\n            this.setState({ citizenInfo: res.data });\n            console.log(this.state.citizenInfo)\n            this.counter();\n        })\n        .catch(function (error) {\n            console.log(error);\n        })\n    }\n\n    counter(){\n        var a = 0;\n        var b = 0;\n        var c = 0;\n        var x = {};\n\n        for(x in this.state.citizenInfo){\n            if (this.state.citizenInfo[x].age){\n                if(this.state.citizenInfo[x].age <= 18){\n                    a++;\n                }\n                else if(this.state.citizenInfo[x].age >= 19 && this.state.citizenInfo[x].age <= 58){\n                    b++;  \n                }\n                else if(this.state.citizenInfo[x].age >= 59){\n                    c++;\n                }\n            }\n        }\n\n        this.setState({series: [a, b, c]});\n    }\n\n    render() {\n        const divStyle = {\n            display: 'block',\n            width: 'max-content',\n            margin: '20px auto',\n        };\n        return (\n        <div style={divStyle}>\n            <Container>\n                <Jumbotron>\n                    <Chart options={this.state.options} series={this.state.series} type=\"donut\" width=\"500\" />\n                </Jumbotron>\n            </Container>\n            </div>\n        );\n    }\n}\n\n\nclass BmiPie extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            options: {\n                labels: ['Underweight (Below 18.5)', 'Healthy Weight (18.5 to 14.9)', 'Overweight(25.0 to 29.9)', 'Obese (30.0 and above)'],\n                title: {\n                    text: \"BMI Analysis\",\n                    align: 'left',\n                    margin: 10,\n                    offsetX: 0,\n                    offsetY: 0,\n                    floating: false,\n                    style: {\n                      fontSize:  '25px',\n                      fontWeight:  'bold',\n                      fontFamily:  undefined,\n                      color:  '#263238'\n                    },\n                },\n            },\n            series: [0, 0, 0, 0],\n            labels: ['Underweight (Below 18.5)', 'Healthy Weight (18.5 to 14.9)', 'Overweight(25.0 to 29.9)', 'Obese (30.0 and above)'],\n            citizenInfo: [{}, {}]\n        }\n    }\n\n    componentDidMount(){\n        axios.get(`http://localhost:${process.env.REACT_APP_SERVER_PORT}/citizen/viewstats`, {\n        })\n        .then(res => {\n            this.setState({ citizenInfo: res.data });\n            console.log(this.state.citizenInfo)\n            this.counter();\n        })\n        .catch(function (error) {\n            console.log(error);\n        })\n    }\n\n    counter(){\n        var a = 0;\n        var b = 0;\n        var c = 0;\n        var d = 0;\n        var x = {};\n\n        for(x in this.state.citizenInfo){\n            if (this.state.citizenInfo[x].bmi){\n                if(this.state.citizenInfo[x].bmi < 18.5){\n                    a++;\n                }\n                else if(this.state.citizenInfo[x].bmi >= 18.5 && this.state.citizenInfo[x].bmi < 25){\n                    b++;  \n                }\n                else if(this.state.citizenInfo[x].bmi >= 25.0 && this.state.citizenInfo[x].bmi < 30){\n                    c++;\n                }\n                else if(this.state.citizenInfo[x].bmi >= 30){\n                    d++;\n                }\n            }\n        }\n\n        this.setState({series: [a, b, c, d]});\n    }\n\n    render() {\n        const divStyle = {\n            display: 'block',\n            width: 'max-content',\n            margin: '20px auto',\n        };\n        return (\n        <div style={divStyle}>\n            <Container>\n                <Jumbotron>\n                    <Chart options={this.state.options} series={this.state.series} type=\"donut\" width=\"600\" />\n                </Jumbotron>\n            </Container>\n        </div>\n        );\n    }\n}\n\n\nclass BedsBar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            options: {\n                chart: {\n                    id: \"basic-bar\"\n                },\n                xaxis: {\n                    categories: []\n                    // hosp names here\n                },\n                title: {\n                    text: \"Number of Beds available\",\n                    align: 'left',\n                    margin: 10,\n                    offsetX: 10,\n                    offsetY: 0,\n                    floating: false,\n                    style: {\n                      fontSize:  '25px',\n                      fontWeight:  'bold',\n                      fontFamily:  undefined,\n                      color:  '#263238'\n                    },\n                },\n            },\n            series: [\n                {\n                    name: \"series-1\",\n                    data: [],\n                    // number of beds here\n                }\n            ],\n            hospInfo: [{}, {}]\n        };\n    }\n\n    componentDidMount(){\n        axios.get(`http://localhost:${process.env.REACT_APP_SERVER_PORT}/hospital/viewstats`, {\n        })\n        .then(res => {\n            this.setState({ hospInfo: res.data });\n            console.log(this.state.hospInfo);\n            this.counter();\n        })\n        .catch(function (error) {\n            console.log(error);\n        })\n    }\n\n    counter(){\n        var x = {};\n        var names = [];\n        var beds = [];\n\n        for(x in this.state.hospInfo){\n            if (this.state.hospInfo[x].name){\n                names[x] = this.state.hospInfo[x].name;\n                beds[x] = this.state.hospInfo[x].no_of_beds;\n            }\n        }\n\n        this.setState({options: {xaxis: {categories: names}}, series: [{name: \"No. of Beds\", data: beds}]});\n    }\n\n    render() {\n        const divStyle = {\n            display: 'block',\n            width: 'max-content',\n            margin: '20px auto',\n        };\n        return (\n            <div style={divStyle}>\n\n            \n            <div className=\"app\">\n            <div className=\"row\">\n                <div className=\"mixed-chart\">\n                \n                <Container>\n                    <Jumbotron>\n                    <Chart\n                        options={this.state.options}\n                        series={this.state.series}\n                        type=\"bar\"\n                        width=\"500\"\n                    />\n                    </Jumbotron>\n                </Container>\n                </div>\n            </div>\n            </div>\n            </div>\n        );\n    }\n}\n\n\nclass CheckupPie extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            options: {\n                labels: ['Last 1 Month', 'Last 2 to 3 Months', 'Beyond 3 months'],\n                title: {\n                    text: \"Last Health Check-up\",\n                    align: 'left',\n                    margin: 10,\n                    offsetX: 0,\n                    offsetY: 0,\n                    floating: false,\n                    style: {\n                      fontSize:  '25px',\n                      fontWeight:  'bold',\n                      fontFamily:  undefined,\n                      color:  '#263238'\n                    },\n                },\n            },\n            series: [0, 0, 0],\n            labels: ['Last 1 Month', 'Last 2 to 3 Months', 'Beyond 3 months'],\n            citizenInfo: [{}, {}]\n        }\n    }\n\n    componentDidMount(){\n        axios.get(`http://localhost:${process.env.REACT_APP_SERVER_PORT}/citizen/viewstats`, {\n        })\n        .then(res => {\n            this.setState({ citizenInfo: res.data });\n            console.log(this.state.citizenInfo)\n            this.counter();\n        })\n        .catch(function (error) {\n            console.log(error);\n        })\n    }\n    diff_months(dt2, dt1) {\n        var diff =(dt2.getTime() - dt1.getTime()) / 1000;\n        diff /= (60 * 60 * 24 * 7 * 4);\n        return Math.abs(Math.round(diff));\n    }\n\n    counter(){\n        var a = 0;\n        var b = 0;\n        var c = 0;\n        var x = {};\n        var d = new Date();\n\n        for(x in this.state.citizenInfo){\n            if (this.state.citizenInfo[x].last_checkup_date){\n\n                var temp = new Date(this.state.citizenInfo[x].last_checkup_date);\n                var diff = this.diff_months(d, temp);\n                if(diff == 0 || diff == 1)\n                    a++;\n                else if(diff == 2 || diff == 3)\n                    b++;\n                else if(diff > 3)\n                    c++;\n            }\n        }\n\n        this.setState({series: [a, b, c]});\n    }\n\n    render() {\n        const divStyle = {\n            display: 'block',\n            width: 'max-content',\n            margin: '20px auto',\n        };\n        return (\n        <div style={divStyle}>\n            <Container>\n                <Jumbotron>\n                    <Chart options={this.state.options} series={this.state.series} type=\"donut\" width=\"600\" />\n                </Jumbotron>\n            </Container>\n        </div>\n        );\n    }\n}\n\nclass AllCharts extends Component {\n    render(){\n        const outerouter = {\n            width:\"75%\",\n            margin: \"0px auto\"\n        }\n        const outer = {\n            display:'flex',\n            flexWrap: 'wrap',\n        }\n        return(\n            <div style={outerouter}>\n                <Jumbotron>\n                    <div style={outer}>\n                        <div>\n                            <AgePie/>\n                        </div>\n                        <div>\n                            <BmiPie/>\n                        </div>\n                        <div>\n                            <CheckupPie/>\n                        </div>\n                        <div>\n                            <BedsBar/>\n                        </div>\n                    </div>\n                    \n                </Jumbotron>\n            </div>\n        )\n    }\n}\n\nexport {\n    AgePie,\n    BmiPie,\n    BedsBar,\n    CheckupPie,\n    AllCharts,\n};","/home/shaunak/SE/SE_Project/client/src/services/Locator.js",["105","106","107","108"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport {Redirect,} from 'react-router-dom';\nimport {\n    Form,\n    Jumbotron,\n    Container,\n    Card,\n    CardDeck\n} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass HospitalLocator extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            HospitalInfo: '',\n            pincode:'',\n            LocatedHospital:'',\n        }\n    }\n\n    componentDidMount(){\n        axios.get(`http://localhost:${process.env.REACT_APP_SERVER_PORT}/hospital/viewstats`, {\n            \n        })\n        .then(res => {\n            this.setState({ HospitalInfo: res.data });\n            console.log(this.state.HospitalInfo)\n        })\n        .catch(function (error) {\n            console.log(error);\n            toast.error('Error')\n        })\n    }\n\n    onChangePincode(e){\n        console.log(e.target.value)\n        const info = this.state.HospitalInfo;\n        console.log(info)\n        let listItems = []\n\n        for(let i = 0; i < info.length; i++){\n            if(info[i].address.slice(-6) == e.target.value){\n                listItems.push(\n                <div>\n                    <CardDeck>\n                    <Card border=\"info\" style={{ width: '18rem' }}>\n                        <Card.Header>Hospital ID: {info[i].hospital_id}</Card.Header>\n                        <Card.Body>\n                            <Card.Text>Name: {info[i].name}</Card.Text>\n                            <Card.Text>Phone Number: {info[i].phone_number[0]}</Card.Text>\n                            <Card.Text>No of Beds: {info[i].no_of_beds}</Card.Text>\n                            <Card.Text>Type: {info[i].type}</Card.Text>\n                            <Card.Text>Address: {info[i].address}</Card.Text>\n                        </Card.Body>\n                    </Card>\n                    </CardDeck><br></br>\n                </div>\n                )\n            }\n        }\n        this.setState({LocatedHospital: listItems})\n    }\n\n    render(){\n        const pincodes = []\n        const uniqueChars = []\n        for (let i = 0; i < this.state.HospitalInfo.length; i++) {\n            pincodes.push(\n                this.state.HospitalInfo[i].address.substr(this.state.HospitalInfo[i].address.length - 6)\n            )\n        }\n        pincodes.forEach((c) => {\n            if (!uniqueChars.includes(c)) {\n                uniqueChars.push(c);\n            }\n        });\n        console.log(uniqueChars)\n\n        const info = []\n        \n        for (let i = 0; i < uniqueChars.length; i++) {\n            info.push(\n                <option value= {uniqueChars[i]}>\n                    {uniqueChars[i]}\n                </option>\n            )\n        }\n        \n        if(info.length === 0){\n            info.push(<option>No available</option>)\n        }\n        return(\n            <Container>\n            <Container>\n                <Jumbotron>\n                    <Form.Group>\n                        <Form.Label>Select Pincode</Form.Label>\n                        <Form.Control as=\"select\" required type=\"number\" placeholder=\"Enter Pincode\" onChange={this.onChangePincode.bind(this)}>\n                            <option disabled selected value> -- select an option -- </option>\n                            {info}\n                        </Form.Control>\n                    </Form.Group>\n                </Jumbotron>\n            </Container>\n            <Container>\n                <Jumbotron>\n                    {this.state.LocatedHospital}\n                </Jumbotron>\n            </Container>\n            </Container>\n        )\n    }\n\n}\n\nclass PharmacyLocator extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            HospitalInfo: '',\n            pincode:'',\n            LocatedHospital:'',\n        }\n    }\n\n    componentDidMount(){\n        axios.get(`http://localhost:${process.env.REACT_APP_SERVER_PORT}/pharmacy/getinfo`, {\n            \n        })\n        .then(res => {\n            this.setState({ HospitalInfo: res.data });\n            console.log(this.state.HospitalInfo)\n        })\n        .catch(function (error) {\n            console.log(error);\n            toast.error('Error')\n        })\n    }\n\n    onChangePincode(e){\n        console.log(e.target.value)\n        const info = this.state.HospitalInfo;\n        console.log(info)\n        let listItems = []\n\n        for(let i = 0; i < info.length; i++){\n            if(info[i].address.slice(-6) == e.target.value){\n                listItems.push(\n                <div>\n                    <CardDeck>\n                    <Card border=\"info\" style={{ width: '18rem' }}>\n                        <Card.Header>Store ID: {info[i].store_id}</Card.Header>\n                        <Card.Body>\n                            <Card.Text>Name: {info[i].name}</Card.Text>\n                            <Card.Text>Phone Number: {info[i].phone_number[0]}</Card.Text>\n                            <Card.Text>Opening Time: {info[i].opening_time}</Card.Text>\n                            <Card.Text>Closing_time: {info[i].closing_time}</Card.Text>\n                            <Card.Text>Address: {info[i].address}</Card.Text>\n                        </Card.Body>\n                    </Card>\n                    </CardDeck><br></br>\n                </div>\n                )\n            }\n        }\n        this.setState({LocatedHospital: listItems})\n    }\n\n    render(){\n        const pincodes = []\n        const uniqueChars = []\n        for (let i = 0; i < this.state.HospitalInfo.length; i++) {\n            pincodes.push(\n                this.state.HospitalInfo[i].address.substr(this.state.HospitalInfo[i].address.length - 6)\n            )\n        }\n        pincodes.forEach((c) => {\n            if (!uniqueChars.includes(c)) {\n                uniqueChars.push(c);\n            }\n        });\n        console.log(uniqueChars)\n\n        const info = []\n        \n        for (let i = 0; i < uniqueChars.length; i++) {\n            info.push(\n                <option value= {uniqueChars[i]}>\n                    {uniqueChars[i]}\n                </option>\n            )\n        }\n        \n        if(info.length === 0){\n            info.push(<option>No available</option>)\n        }\n        return(\n            <Container>\n            <Container>\n                <Jumbotron>\n                    <Form.Group>\n                        <Form.Label>Select Pincode</Form.Label>\n                        <Form.Control as=\"select\" required type=\"number\" placeholder=\"Enter Pincode\" onChange={this.onChangePincode.bind(this)}>\n                            <option disabled selected value> -- select an option -- </option>\n                            {info}\n                        </Form.Control>\n                    </Form.Group>\n                </Jumbotron>\n            </Container>\n            <Container>\n                <Jumbotron>\n                    {this.state.LocatedHospital}\n                </Jumbotron>\n            </Container>\n            </Container>\n        )\n    }\n}\n\nexport{\n    HospitalLocator,\n    PharmacyLocator,\n}",{"ruleId":"109","severity":1,"message":"110","line":4,"column":16,"nodeType":"111","messageId":"112","endLine":4,"endColumn":29},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"109","severity":1,"message":"117","line":18,"column":8,"nodeType":"111","messageId":"112","endLine":18,"endColumn":15},{"ruleId":"109","severity":1,"message":"118","line":97,"column":10,"nodeType":"111","messageId":"112","endLine":97,"endColumn":14},{"ruleId":"109","severity":1,"message":"119","line":99,"column":12,"nodeType":"111","messageId":"112","endLine":99,"endColumn":23},{"ruleId":"109","severity":1,"message":"120","line":103,"column":12,"nodeType":"111","messageId":"112","endLine":103,"endColumn":22},{"ruleId":"109","severity":1,"message":"121","line":107,"column":12,"nodeType":"111","messageId":"112","endLine":107,"endColumn":16},{"ruleId":"122","severity":1,"message":"123","line":127,"column":70,"nodeType":"124","messageId":"125","endLine":127,"endColumn":71},{"ruleId":"126","severity":1,"message":"127","line":290,"column":7,"nodeType":"128","messageId":"129","endLine":290,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":339,"column":7,"nodeType":"128","messageId":"129","endLine":339,"endColumn":22},{"ruleId":"130","severity":1,"message":"131","line":60,"column":37,"nodeType":"124","messageId":"129","endLine":60,"endColumn":39},{"ruleId":"132","severity":1,"message":"133","line":67,"column":9,"nodeType":"134","endLine":67,"endColumn":19},{"ruleId":"109","severity":1,"message":"135","line":3,"column":27,"nodeType":"111","messageId":"112","endLine":3,"endColumn":31},{"ruleId":"130","severity":1,"message":"131","line":19,"column":17,"nodeType":"124","messageId":"129","endLine":19,"endColumn":19},{"ruleId":"132","severity":1,"message":"133","line":66,"column":9,"nodeType":"134","endLine":66,"endColumn":19},{"ruleId":"109","severity":1,"message":"136","line":69,"column":15,"nodeType":"111","messageId":"112","endLine":69,"endColumn":23},{"ruleId":"109","severity":1,"message":"137","line":9,"column":10,"nodeType":"111","messageId":"112","endLine":9,"endColumn":30},{"ruleId":"130","severity":1,"message":"131","line":340,"column":25,"nodeType":"124","messageId":"129","endLine":340,"endColumn":27},{"ruleId":"130","severity":1,"message":"131","line":340,"column":38,"nodeType":"124","messageId":"129","endLine":340,"endColumn":40},{"ruleId":"130","severity":1,"message":"131","line":342,"column":30,"nodeType":"124","messageId":"129","endLine":342,"endColumn":32},{"ruleId":"130","severity":1,"message":"131","line":342,"column":43,"nodeType":"124","messageId":"129","endLine":342,"endColumn":45},{"ruleId":"109","severity":1,"message":"138","line":3,"column":9,"nodeType":"111","messageId":"112","endLine":3,"endColumn":17},{"ruleId":"109","severity":1,"message":"139","line":13,"column":10,"nodeType":"111","messageId":"112","endLine":13,"endColumn":24},{"ruleId":"130","severity":1,"message":"131","line":47,"column":42,"nodeType":"124","messageId":"129","endLine":47,"endColumn":44},{"ruleId":"130","severity":1,"message":"131","line":152,"column":42,"nodeType":"124","messageId":"129","endLine":152,"endColumn":44},"no-unused-vars","'AppWithRouter' is defined but never used.","Identifier","unusedVar","no-native-reassign",["140"],"no-negated-in-lhs",["141"],"'Chatbot' is defined but never used.","'show' is assigned a value but never used.","'handleClose' is defined but never used.","'handleShow' is defined but never used.","'talk' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-dupe-keys","Duplicate key 'backgroundColor'.","ObjectExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'Form' is defined but never used.","'divStyle' is assigned a value but never used.","'relativeTimeRounding' is defined but never used.","'Redirect' is defined but never used.","'ToastContainer' is defined but never used.","no-global-assign","no-unsafe-negation"]